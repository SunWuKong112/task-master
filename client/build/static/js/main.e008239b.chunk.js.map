{"version":3,"sources":["pages/Splash.js","utils/API.js","utils/context.js","pages/Login.js","pages/Signup.js","components/Task.js","pages/Home.js","App.js","registerServiceWorker.js","index.js"],"names":["Splash","history","useHistory","href","onClick","push","user","axios","post","task","id","put","delete","StoreContext","React","createContext","children","useState","currentUser","setUser","Provider","value","Login","emailInput","useRef","passwordInput","response","setResponse","useContext","submitLogin","email","password","API","then","data","action","current","newUser","catch","err","console","log","useEffect","username","url","onSubmit","for","name","ref","placeholder","type","Signup","usernameInput","Task","index","updateTask","deleteTask","changeCompletionStatus","updateInput","dateInput","dueDate","split","title","detail","maxLength","defaultValue","completionStatus","_id","updatedTask","Home","taskInput","detailInput","tasks","setTasks","getTasks","author_id","date","submitTask","JSON","stringify","map","bool","App","className","exact","path","component","props","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e008239b.chunk.js","sourcesContent":["import React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nfunction Splash(){\n     const history = useHistory();\n     return(\n          <div>\n               <h5>Welcome to Task Master</h5>\n               <br/>\n               <button href onClick={()=>history.push('/login')}>Log in</button>\n               <button href onClick={()=>history.push('/signup')}>Sign up</button>\n          </div>\n     );\n}\n\nexport default Splash;","import axios from \"axios\";\n\nexport default {\n     login: function(user){\n          return axios.post(\"/api/users/login\", user);\n     },\n     signUp: function(user){\n          return axios.post(\"/api/users/sign-up\", user);\n     },\n     getUsers: function(){\n          return axios.get(\"/api/users\");\n     },\n     submitTask: function(task){\n          return axios.post(\"/api/tasks/new\", task);\n     },\n     updateTask: function(task, id){\n          return axios.put(`/api/tasks/${id}`, task);\n     },\n     getTasks: function(user){\n          return axios.post(\"/api/tasks/by-author\", user);\n     },\n     deleteTask: function(id){\n          return axios.delete(`/api/tasks/${id}`);\n     }\n};","import React from 'react'\n\nexport const StoreContext = React.createContext(null)\n\nexport default ({children}) => {\n     const [currentUser, setUser] = React.useState('null');\n\n     return <StoreContext.Provider value={{currentUser, setUser}}>{children}</StoreContext.Provider>\n}","import React, {useRef, useState, useContext, useEffect} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport API from \"../utils/API\";\nimport {StoreContext} from \"../utils/context\";\n\nfunction Login(){\n     const history = useHistory();\n     const emailInput = useRef();\n     const passwordInput = useRef();\n     const [response, setResponse] = useState('');\n     const {currentUser, setUser} = useContext(StoreContext);\n\n     useEffect(()=>{\n          if(currentUser.username){\n               const url = `/home/${currentUser.username}`;\n               history.push(url);\n          }\n     }, [currentUser]);\n\n     /*Sends the user input to the server to facilitate login*/\n     function submitLogin(email, password){\n          const user = {\n               email:email,\n               password:password\n          };\n          API.login(user)\n          .then((response)=>{\n               if(response){\n                    if(response.data.response){\n                         setResponse(response.data.response);\n                         if(response.data.action == \"clear all\"){\n                              emailInput.current.value = \"\";\n                              passwordInput.current.value = \"\";\n                         }else if(response.data.action == \"clear password\"){\n                              passwordInput.current.value = \"\";\n                         }\n                    }else if(response.data.user[0]){\n                         const newUser = response.data.user[0];\n                         setUser(newUser);\n                    }\n               }else{\n                    passwordInput.current.value = \"\";\n               }\n          }).catch(err=>console.log(err));\n          // API.getUsers().then(response=>console.log(response)).catch(err=>console.log(err));\n     }\n\n     return(\n          <div>\n               <h5>Login</h5>\n               {response ? <p>{response}</p> : <span></span>}\n               <form onSubmit={()=>submitLogin(emailInput.current.value, passwordInput.current.value)}>\n                    <label for=\"emailInput\">Email:</label>\n                    <br/>\n                    <input href id=\"emailInput\" name=\"emailInput\" ref={emailInput} placeholder=\"johnDoe1234@gmail.com\"\n                    // onkeypress={(e)=>clickPress(e)}\n                    ></input>\n                    <br/>\n                    <br/>\n                    <label for=\"passwordInput\">Password:</label>\n                    <br/>\n                    <input id=\"passwordInput\" name=\"passwordInput\" ref={passwordInput} type=\"password\" placeholder=\"ps1234\"\n                    // onkeypress={(e)=>clickPress(e)}\n                    ></input>\n                    <br/>\n                    <input type=\"button\" value=\"login\" onClick={()=>{\n                         submitLogin(emailInput.current.value, passwordInput.current.value);\n                         \n                    }}></input>\n               </form>\n               <button href onClick={()=>history.push('/signup')}>Don't have an account?</button>\n          </div>\n     );\n}\n\nexport default Login;","import React, {useRef, useState} from \"react\";\nimport {useHistory} from 'react-router-dom';\nimport API from \"../utils/API\";\n\nfunction Signup(){\n     const history = useHistory();\n     const usernameInput = useRef();\n     const emailInput = useRef();\n     const passwordInput = useRef();\n     const [response, setResponse] = useState('');\n\n     function submitSignUp(username, email, password){\n          const newUser = {\n               username:username,\n               email:email,\n               password:password\n          };\n          API.signUp(newUser)\n          .then((response)=>{\n               console.log(response);\n               setResponse(response.data.response);\n               if(response.data.action == \"clear all\"){\n                    usernameInput.current.value = \"\";\n                    emailInput.current.value = \"\";\n                    passwordInput.current.value = \"\";\n               }else if(response.data.action == \"clear password\"){\n                    passwordInput.current.value = \"\";\n               }\n          })\n          .catch(err=>console.log(err));\n          // API.getUsers().then(response=>console.log(response)).catch(err=>console.log(err));\n     }\n\n     return(\n          <div>\n               <h5>Sign up</h5>\n               {response ? <p>{response}</p> : <span></span>}\n               <form>\n                    <label for=\"username-input\">Username:</label>\n                    <br/>\n                    <input id=\"username-input\" name=\"username-input\" ref={usernameInput} placeholder=\"johnDoe1234\"></input>\n                    <br/>\n                    <label for=\"email-input\">Email:</label>\n                    <br/>\n                    <input id=\"email-input\" name=\"email-input\" ref={emailInput} placeholder=\"johndoe@gmail.com\"></input>\n                    <br/>\n                    <label for=\"password-input\">password:</label>\n                    <br/>\n                    <input type=\"password\" id=\"password-input\" name=\"password-input\" ref={passwordInput} placeholder=\"password123\"></input>\n                    <br/>\n                    <input id=\"sign-up-button\" name=\"sign-up-button\" type=\"button\" value=\"Sign up\" onClick={()=>submitSignUp(usernameInput.current.value, emailInput.current.value, passwordInput.current.value)}></input>\n               </form>\n               <button href onClick={()=>history.push('/login')}>Already have an account?</button>\n          </div>\n          \n     );\n}\n\nexport default Signup;","import React, {useRef} from 'react';\n\nfunction Task({task, index, updateTask, deleteTask, changeCompletionStatus}){\n     const id = `task-${index}`;\n     const updateInput = useRef();\n     const dateInput = useRef();\n     const dueDate = task.dueDate.split(\"T\");\n     return(\n     <tr id={id}>\n          <td>{task.title}</td>\n          <td>{task.detail ?\n               <textarea ref={updateInput} maxLength=\"100\" defaultValue={task.detail} />\n          : <span></span>}\n          </td>\n          <td>{task.completionStatus === true ?\n               <span>Completed <button onClick={()=>changeCompletionStatus(false, task._id)}>Mark as in progress</button></span>\n          :\n               <span>In progress <button onClick={()=>changeCompletionStatus(true, task._id)}>Mark as completed</button></span>}\n          </td>\n          <td><input ref={dateInput} type=\"date\" defaultValue={dueDate[0]}></input></td>\n          <button onClick={()=>{\n               const updatedTask = {\n                    detail:updateInput.current.value,\n                    dueDate:dateInput.current.value\n               };\n               updateTask(updatedTask, task._id);\n               // console.log(task);\n          }}>Update task</button>\n          <button onClick={()=>deleteTask(task._id)}>Delete task</button>\n     </tr>);\n}\n\nexport default Task;","import React, {useRef, useState, useContext, useEffect} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport API from \"../utils/API\";\nimport {StoreContext} from \"../utils/context\";\nimport Task from '../components/Task';\n\nfunction Home(){\n     const history = useHistory();\n     const taskInput = useRef();\n     const detailInput = useRef();\n     const dateInput = useRef();\n     const updateDetail = useRef();\n     const updateDueDate = useRef();\n     const [tasks, setTasks] = useState([]);\n     const {currentUser, setUser} = useContext(StoreContext);\n\n     function submitTask(title, detail, date){\n          const task = {\n               author_id: currentUser._id,\n               title: title,\n               detail: detail,\n               dueDate: date\n          };\n          console.log(task);\n          API.submitTask(task)\n          .then(response=>{\n               console.log(response);\n               setTasks([...tasks, response]);\n          }).catch(err=>{\n               console.log(err);\n          });\n     }\n\n     useEffect(()=>{\n          getTasks();\n     }, [currentUser]);\n\n     function getTasks(){\n          if(currentUser._id){\n               API.getTasks({author_id:currentUser._id})\n               .then(response=>{\n                    const data = response.data;\n                    setTasks([]);\n                    const task = data.tasks;\n                    console.log(task);\n                    setTasks([...task]);\n               });\n          }else{\n               history.push(\"/login\");\n          }\n     }\n\n     function updateTask(task, id){\n          API.updateTask(task, id)\n          .then(()=>{\n               getTasks();\n          }).catch();\n     }\n\n     function deleteTask(id){\n          API.deleteTask(id)\n          .then(()=>{\n               getTasks();\n          }).catch();\n     }\n\n     function changeCompletionStatus(bool, id){\n          const task = {\n               completionStatus:bool\n          };\n          API.updateTask(task, id)\n          .then(()=>{\n               getTasks();\n          }).catch();\n     }\n\n     return(\n          <div>\n               <button onClick={()=>{setUser([])}}>Log out</button>\n               <form>\n                    <label for=\"task-title\">Enter task:</label>\n                    <br/>\n                    <input id=\"task-title\" name=\"task-title\" maxLength=\"10\" ref={taskInput}></input>\n                    <br/>\n                    <label for=\"task-description\">Enter Description:</label>\n                    <br/>\n                    <textarea id=\"task-description\" name=\"task-description\" maxLength=\"30\" ref={detailInput}></textarea>\n                    <br/>\n                    <label for=\"dueDate\" ref={dateInput}>Enter due date:</label>\n                    <br/>\n                    <input type=\"date\" for=\"dueDate\" name=\"dueDate\" ref={dateInput}></input>\n                    <br/>\n                    <input type=\"button\" value=\"submitTask\" onClick={()=>submitTask(taskInput.current.value, detailInput.current.value, dateInput.current.value)}></input>\n               </form>\n               <br/>\n               {JSON.stringify(tasks) !== \"[]\" ?\n               <table>\n                    <tr>\n                         <th>Title</th>\n                         <th>Details</th>\n                         <th>Status</th>\n                         <th>Due date</th>\n                    </tr>\n                    {tasks.map((task, index)=>{\n                    // const table = task.task;\n                    console.log(task);\n                    return(\n                         <Task task={task} index={index} updateTask={(task, id)=>updateTask(task, id)} deleteTask={(id)=>deleteTask(id)} changeCompletionStatus={(bool, id)=>changeCompletionStatus(bool, id)}/>\n                         );\n               })}</table>\n               :\n               <span></span>}\n               <button onClick={()=>{\n                    setUser([]);\n                    history.push(\"/login\");\n               }}>Log out</button>\n          </div>\n     );\n}\n\nexport default Home;","// import logo from './logo.svg';\nimport './App.css';\nimport Splash from \"./pages/Splash\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Home from \"./pages/Home\";\nimport React, {useState} from \"react\";\nimport {Route, BrowserRouter} from 'react-router-dom';\n\nfunction App() {\n  const [user, setUser] = useState({});\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <br/>\n        <BrowserRouter>\n          {/*Path to splash page*/}\n          <Route exact path=\"/\" component={Splash}></Route>\n          {/*Path to form for existing users to log in*/}\n          <Route exact path=\"/login\" component={Login} props={user, setUser}></Route>\n          {/*Path to form for new users to sign up*/}\n          <Route exact path=\"/signup\" component={Signup}></Route>\n          {/*Path to home page which*/}\n          <Route exact path=\"/home/:username\" component={Home} props={user, setUser}></Route>\n        </BrowserRouter>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport Context from \"./utils/context\";\n\nReactDOM.render(\n     <Context>\n          <App />\n     </Context>,\n     document.getElementById(\"root\")\n);\nregisterServiceWorker();"],"sourceRoot":""}